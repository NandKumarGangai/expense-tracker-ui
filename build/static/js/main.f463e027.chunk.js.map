{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","utils/format.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","type","data","transactions","filter","transaction","_id","loading","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","getTransactions","a","Axios","get","res","console","log","response","deleteTransaction","id","delete","addTransaction","config","headers","post","Provider","value","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","acc","index","toFixed","IncomeExpenses","amounts","income","item","expenses","className","Math","abs","Transaction","sign","text","onClick","TransactionList","useEffect","AddTransaction","useState","Text","setText","Amount","setAmount","htmlfor","onChange","e","target","placeholder","preventDefault","newTransaction","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+PAEe,SAASA,IACpB,OACI,oCACI,gD,iECLG,WAACC,EAAD,GAA4B,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC3B,OAAQD,GACJ,IAAK,qBACD,OAAO,eACAD,EADP,CAEIG,aAAcH,EAAMG,aAAaC,QAAO,SAAAC,GAAW,OAAIA,EAAYC,MAAQJ,OAGnF,IAAK,kBACD,OAAO,eACAF,EADP,CAEIG,aAAa,GAAD,mBAAOH,EAAMG,cAAb,CAA2BD,MAG/C,IAAK,kBACD,OAAO,eACAF,EADP,CAEIO,SAAS,EACTJ,aAAcD,IAGtB,IAAK,oBACD,OAAO,eACAF,EADP,CAEIQ,MAAON,IAEf,QACI,OAAOF,ICfbS,EAAe,CACjBN,aAAc,GACdK,MAAO,KACPD,SAAS,GAGAG,EAAgBC,wBAAcF,GAE9BG,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAClBC,qBAAWC,EAAYN,GADL,mBACrCT,EADqC,KAC9BgB,EAD8B,KAGtCC,EAAe,uCAAG,4BAAAC,EAAA,+EAEEC,IAAMC,IAAI,wBAFZ,OAEVC,EAFU,OAGhBC,QAAQC,IAAIF,EAAInB,MAChBc,EAAS,CACLf,KAAM,kBACNC,KAAMmB,EAAInB,KAAKA,OANH,gDAShBoB,QAAQC,IAAR,MACAP,EAAS,CACLf,KAAM,oBACNC,KAAM,KAAMsB,SAAStB,KAAKM,QAZd,yDAAH,qDAiBfiB,EAAiB,uCAAG,WAAOC,GAAP,SAAAR,EAAA,+EAEAC,IAAMQ,OAAN,+BAAqCD,IAFrC,cAIlBV,EAAS,CACLf,KAAM,qBACNC,KAAMwB,IANQ,gDASlBV,EAAS,CACLf,KAAM,oBACNC,KAAM,KAAMsB,SAAStB,KAAKM,QAXZ,yDAAH,sDAgBjBoB,EAAc,uCAAG,WAAOvB,GAAP,iBAAAa,EAAA,sEAETW,EAAS,CACXC,QAAS,CACL,eAAgB,qBAJT,SAOGX,IAAMY,KAAK,uBAAwB1B,EAAawB,GAPnD,OAOTR,EAPS,OASfL,EAAS,CACLf,KAAM,kBACNC,KAAMmB,EAAInB,KAAKA,OAXJ,gDAcfc,EAAS,CACLf,KAAM,oBACNC,KAAM,KAAMsB,SAAStB,KAAKM,QAhBf,yDAAH,sDAqBpB,OACI,kBAACE,EAAcsB,SAAf,CAAwBC,MAAO,CAC3B9B,aAAcH,EAAMG,aACpBK,MAAOR,EAAMQ,MACbD,QAASP,EAAMO,QACfU,kBACAQ,oBACAG,mBAEEf,ICtFP,SAASqB,EAAiBC,GAC7B,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,KCG1C,SAASC,IAAW,IAGzBC,EADmBC,qBAAW9B,GAA5BP,aACmBsC,KAAI,SAAAtC,GAAY,OAAIA,EAAauC,UAAQC,QAAO,SAACC,EAAKC,GAAN,OAAiBD,EAAOC,IAAQ,GAAGC,QAAQ,GACtH,OACI,oCACI,4CACA,wBAAIpB,GAAG,WAAP,IAAmBQ,EAAiBK,KCPjC,SAASQ,IAAkB,IAGhCC,EADmBR,qBAAW9B,GAA5BP,aACqBsC,KAAK,SAAApC,GAAW,OAAIA,EAAYqC,UACvDO,EAASD,EACV5C,QAAQ,SAAAC,GAAW,OAAIA,EAAc,KACrCsC,QAAO,SAACtC,EAAa6C,GAAd,OAAwB7C,EAAe6C,IAAO,GACrDJ,QAAQ,GAEPK,IAE0D,EAF9CH,EACb5C,QAAO,SAAAC,GAAW,OAAIA,EAAc,KACpCsC,QAAO,SAACtC,EAAa6C,GAAd,OAAwB7C,EAAe6C,IAAO,IACrDJ,QAAQ,GAEb,OACI,oCACI,yBAAKM,UAAU,qBACX,6BACI,sCACA,uBAAG1B,GAAG,aAAa0B,UAAU,cAA7B,IAA4ClB,EAAiBe,KAEjE,6BACI,uCACA,uBAAGvB,GAAG,cAAc0B,UAAU,eAA9B,IAA8CC,KAAKC,IAAIpB,EAAiBiB,QCvB7E,SAASI,EAAT,GAAuC,IAAhBlD,EAAe,EAAfA,YAC1BoB,EAAsBe,qBAAW9B,GAAjCe,kBACF+B,EAAOnD,EAAYqC,OAAS,EAAI,IAAM,IAE5C,OACI,wBAAIU,UAAW/C,EAAYqC,OAAS,EAAI,OAAS,SAC5CrC,EAAYoD,KADjB,IACuB,8BAAOD,EAAP,IAActB,EAAiBmB,KAAKC,IAAIjD,EAAYqC,UACvE,4BAAQU,UAAU,aAAaM,QAAU,kBAAMjC,EAAkBpB,EAAYC,OAA7E,MCPG,SAASqD,IAAmB,IAAD,EACInB,qBAAW9B,GAA7CP,EAD8B,EAC9BA,aAAcc,EADgB,EAChBA,gBAStB,OAPA2C,qBAAU,WACN3C,MAID,IAGC,oCACI,uCACA,wBAAIS,GAAG,OAAO0B,UAAU,QAEhBjD,EAAasC,KAAK,SAAApC,GAAW,OACzB,kBAACkD,EAAD,CAAalD,YAAaA,SCjBnC,SAASwD,IAAkB,IAAD,EACbC,mBAAS,IADI,mBAC9BC,EAD8B,KACxBC,EADwB,OAETF,mBAAS,GAFA,mBAE9BG,EAF8B,KAEtBC,EAFsB,KAG7BtC,EAAmBY,qBAAW9B,GAA9BkB,eAaR,OACI,oCACI,mDACA,0BAAMF,GAAG,QACL,yBAAK0B,UAAU,gBACX,2BAAOe,QAAQ,QAAf,QACA,2BAAOlE,KAAK,OAAOgC,MAAO8B,EAAMK,SAAU,SAAAC,GAAC,OAAIL,EAAQK,EAAEC,OAAOrC,QAAQsC,YAAY,mBAExF,yBAAKnB,UAAU,gBACX,2BAAOe,QAAQ,UAAf,SAEI,6BAFJ,2CAKA,2BAAOlE,KAAK,SAASgC,MAAOgC,EAAQG,SAAU,SAAAC,GAAC,OAAIH,EAAUG,EAAEC,OAAOrC,QAAQsC,YAAY,qBAE9F,4BAAQnB,UAAU,MAAMM,QA3BZ,SAACW,GACrBA,EAAEG,iBAEF,IAAMC,EAAiB,CACnB/C,GAAI2B,KAAKqB,MAAsB,IAAhBrB,KAAKsB,UACpBlB,KAAMM,EACNrB,QAASuB,GAGbrC,EAAe6C,KAkBP,qBCZDG,MAdf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC7E,EAAD,MACA,yBAAKqD,UAAU,aACb,kBAACd,EAAD,MACA,kBAACS,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCLY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApF,GACLc,QAAQd,MAAMA,EAAMqF,c","file":"static/js/main.f463e027.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <>\r\n            <h2>Expense Tracker</h2>\r\n        </>\r\n    );\r\n}\r\n","export default (state, { type, data }) => {\r\n    switch (type) {\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction._id !== data)\r\n            }\r\n\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: [ ...state.transactions, data ]\r\n            }\r\n\r\n        case 'GET_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                transactions: data\r\n            }\r\n\r\n        case 'TRANSACTION_ERROR':\r\n            return {\r\n                ...state,\r\n                error: data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport Axios from 'axios';\r\nimport AppReducer from './AppReducer';\r\n\r\n// const initialState = {\r\n//     transactions: [\r\n//     { id: 1, text: 'Flower', amount: -20 },\r\n//     { id: 2, text: 'Salary', amount: 300 },\r\n//     { id: 3, text: 'Book', amount: -10 },\r\n//     { id: 4, text: 'Camera', amount: 150 }\r\n//     ]\r\n// };\r\nconst initialState = {\r\n    transactions: [],\r\n    error: null,\r\n    loading: true\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    const getTransactions = async () => {\r\n        try {\r\n            const res = await Axios.get('/api/v1/transactions');\r\n            console.log(res.data);\r\n            dispatch({\r\n                type: 'GET_TRANSACTION',\r\n                data: res.data.data\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                data: error.response.data.error\r\n            });\r\n        }\r\n    }\r\n\r\n    const deleteTransaction = async (id) => {\r\n        try {\r\n            const res = await Axios.delete(`/api/v1/transactions/${id}`);\r\n\r\n            dispatch({\r\n                type: 'DELETE_TRANSACTION',\r\n                data: id\r\n            });        \r\n        } catch (error) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                data: error.response.data.error\r\n            });\r\n        }\r\n    }\r\n\r\n    const addTransaction = async (transaction) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            };\r\n            const res = await Axios.post('/api/v1/transactions', transaction, config);\r\n\r\n            dispatch({\r\n                type: 'ADD_TRANSACTION',\r\n                data: res.data.data\r\n            });\r\n        } catch (error) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                data: error.response.data.error\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            transactions: state.transactions,\r\n            error: state.error,\r\n            loading: state.loading,\r\n            getTransactions,\r\n            deleteTransaction,\r\n            addTransaction\r\n        }}>\r\n            { children }\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n","export function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { numberWithCommas } from '../utils/format';\r\n\r\nexport default function Balance() {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n    const total = transactions.map(transactions => transactions.amount).reduce((acc, index) => (acc += index), 0).toFixed(2);\r\n    return (\r\n        <>\r\n            <h4>Your Balance</h4>\r\n            <h1 id=\"balance\">${numberWithCommas(total)}</h1>\r\n        </>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { numberWithCommas } from '../utils/format';\r\n\r\nexport default function IncomeExpenses() {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map( transaction => transaction.amount );\r\n    const income = amounts\r\n        .filter( transaction => transaction > 0)\r\n        .reduce((transaction, item) => (transaction += item), 0)\r\n        .toFixed(2);\r\n\r\n    const expenses = (amounts\r\n        .filter(transaction => transaction < 0)\r\n        .reduce((transaction, item) => (transaction += item), 0) * -1)\r\n        .toFixed(2);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"inc-exp-container\">\r\n                <div>\r\n                    <h4>Income</h4>\r\n                    <p id=\"money-plus\" className=\"money plus\">${numberWithCommas(income)}</p>\r\n                </div>\r\n                <div>\r\n                    <h4>Expense</h4>\r\n                    <p id=\"money-minus\" className=\"money minus\">${Math.abs(numberWithCommas(expenses))}</p>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { numberWithCommas } from '../utils/format';\r\n\r\nexport default function Transaction({ transaction }) {\r\n    const { deleteTransaction } = useContext(GlobalContext);\r\n    const sign = transaction.amount > 0 ? '+' : '-';\r\n\r\n    return (\r\n        <li className={transaction.amount > 0 ? 'plus' : 'minus'}>\r\n            {transaction.text} <span>{sign}${numberWithCommas(Math.abs(transaction.amount))}</span>\r\n            <button className=\"delete-btn\" onClick={ () => deleteTransaction(transaction._id)}>x</button>\r\n        </li>\r\n    );\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport Transaction from './Transaction';\r\n\r\nexport default function TransactionList() {\r\n    const { transactions, getTransactions } = useContext(GlobalContext);\r\n\r\n    useEffect(() => {\r\n        getTransactions();\r\n        // return () => {\r\n        //     cleanup\r\n        // }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h3>History</h3>\r\n            <ul id=\"list\" className=\"list\">\r\n                {\r\n                    transactions.map( transaction =>\r\n                        <Transaction transaction={transaction} />\r\n                    )\r\n                }\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport default function AddTransaction() {\r\n    const [Text, setText] = useState('');\r\n    const [Amount, setAmount] = useState(0);\r\n    const { addTransaction } = useContext(GlobalContext);\r\n\r\n    const onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        \r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text: Text,\r\n            amount: +Amount\r\n        }\r\n\r\n        addTransaction(newTransaction);\r\n    }\r\n    return (\r\n        <>\r\n            <h3>Add new transaction</h3>\r\n            <form id=\"form\">\r\n                <div className=\"form-control\">\r\n                    <label htmlfor=\"text\">Text</label>\r\n                    <input type=\"text\" value={Text} onChange={e => setText(e.target.value)} placeholder=\"Enter text...\" />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label htmlfor=\"amount\" >\r\n                        Amount\r\n                        <br />\r\n                        (negative - expense, positive - income)</label\r\n                    >\r\n                    <input type=\"number\" value={Amount} onChange={e => setAmount(e.target.value)} placeholder=\"Enter amount...\" />\r\n                </div>\r\n                <button className=\"btn\" onClick={onSubmitHandler}>Add transaction</button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Balance from './components/Balance';\r\nimport IncomeExpenses from './components/IncomeExpenses';\r\nimport TransactinList from './components/TransactionList';\r\nimport AddTrasaction from './components/AddTransaction';\r\nimport { GlobalProvider } from './context/GlobalState';\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <Balance />\r\n        <IncomeExpenses />\r\n        <AddTrasaction />\r\n        <TransactinList />\r\n      </div>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}